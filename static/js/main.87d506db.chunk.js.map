{"version":3,"sources":["Components/themeComponents/WebHeader.tsx","Components/themeComponents/WebFooter.tsx","Components/welcomeMod/weatherGetter/getWeather.ts","Components/welcomeMod/weatherGetter/WeatherPrinter.tsx","Components/welcomeMod/IntroText.tsx","Components/welcomeMod/projectElement/ProjectLink.tsx","Components/welcomeMod/projectElement/ProjectTitle.tsx","Components/welcomeMod/projectElement/ProjectText.tsx","Components/welcomeMod/projectElement/ProjectPicture.tsx","Components/welcomeMod/projectElement/Project.tsx","Components/welcomeMod/projectElement/ProjectPrinter.tsx","Components/welcomeMod/contactElement/Contact.tsx","Components/welcomeMod/welcome.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["className","getWeather","a","fetch","proxyurl","headers","then","resp","json","respJSON","consolidated_weather","the_temp","catch","err","console","log","responseTemp","roundTemp","temperature","Math","round","WeatherPrinter","tempData","setState","temp","this","printTheWeather","state","React","style","marginBottom","link","buttonText","onClick","window","open","title","text","ProjectTitle","picRef","src","process","description","pictureRef","id","ProjectPicture","ProjectText","ProjectLink","PrintedListofProjects","projects","map","element","Project","linkText","href","target","WelcomeIntro","WebHeader","IntroText","ProjectPrinter","Contact","WebFooter","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.87d506db.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport './themeStyle.css'\r\n\r\nexport default ()=>{\r\n    return(\r\n        <div className=\"headerBackground\">\r\n            <p className=\"headerText\"> </p>\r\n        </div>\r\n    )\r\n}\r\n","import * as React from 'react';\r\nimport './themeStyle.css'\r\n\r\nexport default ()=>{\r\n    return(\r\n        <div className=\"footerBackground\">\r\n            <p className=\"footerText\">made by @thecaptain420 in React.JS</p>\r\n        </div>\r\n    )\r\n}\r\n","export async function getWeather() {\r\n    let url: string = \"https://www.metaweather.com/api/location/554890/\"\r\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n    \r\n    let responseTemp = await fetch(proxyurl+url,{\r\n        headers:{\r\n            'Content-Type': 'application/json',\r\n            \"XMLHttpRequest\":\"X-Requested-With\"\r\n        }\r\n    }).then(resp => resp.json()).then(respJSON => respJSON.consolidated_weather[0].the_temp).catch(err=>console.log(err))\r\n\r\n    responseTemp=roundTemp(responseTemp);\r\n\r\n    return responseTemp\r\n}\r\n\r\nfunction roundTemp(temperature:number):number{\r\n    let roundedNumber:number;\r\n    roundedNumber=Math.round(temperature)\r\n    return roundedNumber;\r\n}\r\n\r\n","import * as React from 'react';\r\nimport {getWeather} from './getWeather'\r\n\r\ntype WeatherState = {\r\n    temp:string\r\n}\r\n\r\nexport default class WeatherPrinter extends React.Component<{},WeatherState> {\r\n    async printTheWeather(){\r\n        try{\r\n            const temperature = getWeather();\r\n            await temperature.then(tempData => this.setState({temp:tempData}))\r\n        }catch(err){\r\n            console.log(err)\r\n            this.setState({temp:\"temperature couldnt be gotten\"})\r\n        }\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.setState({temp:\"loading\"})\r\n        this.printTheWeather();\r\n    }\r\n\r\n    render() {\r\n    return (\r\n      <div >\r\n          Idag er vejret {this.state.temp} grader celcius\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","import * as React from 'react';\r\nimport './welcome.css'\r\n\r\nexport default()=>{\r\n    return(\r\n        <div>\r\n            <p className=\"wNormalText\" style={{marginBottom:\"50px\"}}>\r\n                Denne side vil vise alle mine større projekter,<br/>som jeg har lavet igennem årene som udvikler.\r\n            </p>\r\n        </div>\r\n    )\r\n}","import * as React from 'react';\r\nimport './projectStyle.css'\r\n\r\ntype LinkProps={\r\n    link:string,\r\n    buttonText:string\r\n}\r\n\r\nexport default ({link,buttonText}:LinkProps)=>{\r\n    return(\r\n        <div>\r\n            <button className=\"linkButton\" onClick={()=>window.open(link)}>\r\n                {buttonText}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import * as React from 'react';\r\nimport './projectStyle.css'\r\n\r\ntype props={\r\n    title:string\r\n}\r\n\r\nexport default ({title}:props)=>{\r\n    return(\r\n        <div>\r\n            <p className=\"projectTitle\">\r\n                {title}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import * as React from 'react';\r\nimport ProjectTitle from './ProjectTitle'\r\nimport './projectStyle.css'\r\n\r\ntype Props={\r\n    text:string,\r\n    title:string\r\n}\r\nexport default ({text,title}:Props)=>{\r\n    return(\r\n        <div >\r\n            <ProjectTitle title={title}/>\r\n            <p className=\"projectDesText\">\r\n                {text}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import * as React from 'react';\r\nimport './projectStyle.css'\r\n\r\ntype Props={\r\n    picRef:string\r\n}\r\n\r\nexport default ({picRef}:Props)=>{\r\n    return(\r\n        <div>\r\n            <img src={process.env.PUBLIC_URL+picRef} className=\"projectPicture\"/>\r\n        </div>\r\n    )\r\n}\r\n","import * as React from 'react';\r\nimport ProjectLink from './ProjectLink'\r\nimport ProjectText from './ProjectText'\r\nimport ProjectPicture from './ProjectPicture'\r\nimport './projectStyle.css'\r\n\r\n\r\ntype ProjectProps = {\r\n    title: string,\r\n    description: string,\r\n    pictureRef: string,\r\n    link: string,\r\n    buttonText: string\r\n}\r\n\r\n\r\nexport default ({ title, description, pictureRef, link, buttonText }: ProjectProps) => {\r\n    return (\r\n        <div className=\"mainProjectClass\">\r\n            <div id=\"projectPictureBox\">\r\n                <ProjectPicture picRef={pictureRef} />\r\n            </div>\r\n            <div className=\"projectTextBox\">\r\n                <ProjectText text={description} title={title} />\r\n                <ProjectLink link={link} buttonText={buttonText} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import * as React from 'react';\r\nimport Project from './Project'\r\nimport './projectStyle.css'\r\nimport projects from './myProjects.json'\r\n\r\nexport default () => {\r\n    const projectsArray = projects.projects;\r\n\r\n    const PrintedListofProjects = projectsArray.map(element => \r\n        <Project buttonText={element.linkText} title={element.title} description={element.description} link={element.link} pictureRef={element.pictureRef} />\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            {PrintedListofProjects}\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport './contactStyle.css'\r\n\r\n\r\n\r\nexport default () => {\r\n    return (\r\n        <div className=\"contactBox\">\r\n            <p className=\"contactTitle\">\r\n                Kontakt mig gerne på en af de følgende måder!\r\n            </p>\r\n            <p className=\"contactText\">\r\n               Telefon: +45 28 97 03 12 <br/>\r\n               Email: mads.nielsen@hotmail.com <br/>\r\n               LinkedIn: <a className=\"contactText\" href='https://www.linkedin.com/in/mads-nielsen-768653110/' target=\"_blank\"> \r\n                 https://www.linkedin.com/in/mads-nielsen-768653110/\r\n               </a>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import * as React from 'react';\r\nimport './welcome.css'\r\nimport WebHeader from '../themeComponents/WebHeader'\r\nimport WebFooter from '../themeComponents/WebFooter'\r\nimport WeatherPrinter from './weatherGetter/WeatherPrinter'\r\nimport IntroText from './IntroText'\r\nimport ProjectPrinter from './projectElement/ProjectPrinter'\r\nimport ContactMe from \"./contactElement/Contact\";\r\nexport interface IWelcomeIntroProps {\r\n}\r\n\r\nexport default class WelcomeIntro extends React.Component<IWelcomeIntroProps> {\r\n  public render() {\r\n    return (\r\n      <div className=\"wholePage\">\r\n        <WebHeader/>\r\n        <p className=\"wHeaderText\">\r\n            Velkommen til mit CV\r\n        </p> \r\n        <p className=\"wNormalText\">\r\n          <WeatherPrinter/>\r\n        </p>\r\n        <IntroText></IntroText>\r\n        <ProjectPrinter/>\r\n        <ContactMe/>\r\n        <WebFooter/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport WelcomeModule from './Components/welcomeMod/welcome';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div >\r\n      <WelcomeModule></WelcomeModule>\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}